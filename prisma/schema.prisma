// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
 provider          = "postgresql"
  url               = env("DATABASE_URL")
}

enum SpaceUserRole {
    USER
    ADMIN
}

enum InvitationStatus {
    ACCEPTED
    PENDING
    DECLINED
}

enum SubscriptionType {
    FREE
    STANDARD
    PREMIUM
}

enum TeamRole {
    MEMBER
    OWNER
}

model Form {
    id Int @id() @default(autoincrement())
    userId String
    createdAt DateTime @default(now())
    published Boolean @default(false)
    name String
    description String @default("")
    content String @default("[]")
    thumbnail String @default("https://unlimitednow.live/assets/images/logo3-369x208.png")
    visits Int @default(0)
    submissions Int @default(0)
    shareURL String @unique() @default(uuid())
    FormSubmissions FormSubmissions[]
    space Space @relation(fields: [spaceId], references: [id])
    spaceId String

    @@unique([name, userId])
}

model FormSubmissions {
    id Int @id() @default(autoincrement())
    createdAt DateTime @default(now())
    formId Int
    form Form @relation(fields: [formId], references: [id])
    content String
}

model channels {
    id String @id() @default(uuid())
}

/// @@deny('all', auth() == null)
/// @@allow('create', true)
/// @@allow('read', members ? [user == auth()])
/// @@allow('update,delete', members ? [user == auth() && role == ADMIN])
model Space {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @length(4, 50)
    name String
    /// @regex('^[0-9a-zA-Z]{4,16}$')
    slug String @unique()
    members SpaceUser[]
    lists List[]
    forms Form[]
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String
}

/// @@deny('all', auth() == null)
/// @@allow('create,update,delete', space.members ? [user == auth() && role == ADMIN])
/// @@allow('read', space.members ? [user == auth()])
model SpaceUser {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role SpaceUserRole

    @@unique([userId, spaceId])
}

/// @@allow('create', true)
/// @@allow('read', spaces ? [space.members ? [user == auth()]])
/// @@allow('all', auth() == this)
model User {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @email
    email String @unique()
    emailVerified DateTime?
    /// @password
    /// @omit
    password String?
    name String?
    spaces SpaceUser[]
    /// @url
    image String?
    lists List[]
    todos Todo[]
    workspaces Workspace[]
    userCode String @unique() @default(cuid())
    accounts Account[]
    sessions Session[]
    membership Member[] @relation("membership")
    invitedMembers Member[] @relation("inviter")
    customerPayment CustomerPayment?
    domains Domain[]

    @@unique([userCode, email])
    @@map("users")
}

model CustomerPayment {
    id String @id() @default(cuid())
    paymentId String @unique()
    customerId String @unique()
    email String? @unique()
    subscriptionType SubscriptionType @default(FREE)
    createdAt DateTime? @default(now())
    deletedAt DateTime?
    updatedAt DateTime? @updatedAt()
    customer User @relation(fields: [customerId], references: [id])

    @@map("customerPayments")
}

model Domain {
    id String @id() @default(cuid())
    workspaceId String
    addedById String
    name String
    subdomain String?
    verified Boolean? @default(true)
    value String?
    createdAt DateTime? @default(now())
    deletedAt DateTime?
    updatedAt DateTime? @updatedAt()
    addedBy User @relation(fields: [addedById], references: [id])
    workspace Workspace @relation(fields: [workspaceId], references: [id])

    @@map("domains")
}

model Member {
    id String @id() @default(cuid())
    workspaceId String
    email String
    inviter String
    invitedAt DateTime? @default(now())
    joinedAt DateTime?
    deletedAt DateTime?
    updatedAt DateTime? @updatedAt()
    status InvitationStatus @default(PENDING)
    teamRole TeamRole @default(MEMBER)
    member User? @relation(fields: [email], references: [email], name: "membership")
    invitedBy User? @relation(fields: [inviter], references: [email], name: "inviter")
    workspace Workspace @relation(fields: [workspaceId], references: [id])

    @@unique([workspaceId, email])
    @@map("members")
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Workspace {
    id String @id() @default(cuid())
    workspaceCode String @unique() @default(cuid())
    inviteCode String @unique() @default(cuid())
    creatorId String
    name String
    slug String
    createdAt DateTime? @default(now())
    deletedAt DateTime?
    updatedAt DateTime? @updatedAt()
    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    members Member[]
    domains Domain[]
    spaces Space[]

    @@unique([workspaceCode, inviteCode])
    @@map("workspaces")
}

/// @@deny('all', auth() == null)
/// @@allow('read', owner == auth() || (space.members ? [user == auth()] && !private))
/// @@allow('create', owner == auth() && space.members ? [user == auth()])
/// @@allow('update', owner == auth() && space.members ? [user == auth()] && future().owner == owner)
/// @@allow('delete', owner == auth())
model List {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    /// @length(1, 100)
    title String
    private Boolean @default(false)
    todos Todo[]
}

/// @@deny('all', auth() == null)
/// @@allow('all', list.owner == auth())
/// @@allow('all', list.space.members ? [user == auth()] && !list.private)
/// @@deny('update', future().owner != owner)
model Todo {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    list List @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId String
    /// @length(1, 100)
    title String
    completedAt DateTime?
}

model Account {
    id String @id() @default(uuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    refresh_token_expires_in Int?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Category {
    id String @id() @default(uuid())
}

model Post {
    id String @id() @default(uuid())
}

model LikedPosts {
    id String @id() @default(uuid())
}

model Comment {
    id String @id() @default(uuid())
}

model Link {
    id String @id() @default(uuid())
}

model Projects {
    id String @id() @default(uuid())
}

model Blueprint {
    id String @id() @default(uuid())
}